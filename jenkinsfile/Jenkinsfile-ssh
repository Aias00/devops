pipeline {
  agent {
    node {
      label 'maven'
    }
  }
  stages {
    stage('拉代码') {
      agent none
      steps {
        container('base') {
          git(url: env.GIT_URL, credentialsId: env.GIT_CREDENTIAL_ID, branch: env.BRANCH_NAME, changelog: true, poll: false)
        }
      }
    }

    stage('打标签') {
      agent none
      steps {
        container('maven') {
          // 时间戳
          script {
            TIMESTAMP = sh(returnStdout: true, script: "echo `date '+%Y%m%d%H%M%S'`")
          }
          // maven项目版本号
          script {
            PROJECT_VERSION = sh(returnStdout: true, script: 'mvn help:evaluate -Dexpression=project.version -q -DforceStdout')
            GIT_TAG = "devops-${PROJECT_VERSION}-${TIMESTAMP}"
            env.PROJECT_VERSION = "${PROJECT_VERSION}"
          }
          // git tag
          withCredentials([usernamePassword(credentialsId: env.GIT_CREDENTIAL_ID, passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
            sh """
              git config --global user.email env.GIT_EMAIL
              git config --global user.name ${GIT_USERNAME}
              git tag -m 'kubesphere auto tag' -a ${GIT_TAG}
              git push http://${GIT_CREDENTIAL_ID}:${GIT_PASSWORD}@${git} --tags
          """
          }
        }
      }
    }

    stage('maven编译') {
      agent none
      steps {
        container('maven') {
          sh 'mvn clean install -DskipTests -U -Pthin-jar,release'
        }
      }
    }

    stage('docker build') {
      agent none
      steps {
        container('maven') {
          sh 'docker build -f Dockerfile -t $REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:$PROJECT_VERSION-$BUILD_NUMBER .'
        }
      }
    }

    stage('docker push') {
      agent none
      steps {
        container('maven') {
          withCredentials([usernamePassword(credentialsId : env.DOCKERHUB_CREDENTIAL_ID ,passwordVariable : 'DOCKER_PASSWORD' ,usernameVariable : 'DOCKER_USERNAME' ,)]) {
            sh 'echo "$DOCKER_PASSWORD" | docker login $REGISTRY -u "$DOCKER_USERNAME" --password-stdin'
          }

          sh 'docker push  $REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:$PROJECT_VERSION-$BUILD_NUMBER'
        }
      }
    }
    stage('SSH Steps Rocks!') {
      steps {
          script {
            def remote = [:]
            remote.name = 'test'
            remote.host = '10.191.23.122'
            remote.allowAnyHosts = true
            withCredentials([usernamePassword(credentialsId: 'prod-user', passwordVariable: 'password', usernameVariable: 'username')]) {
            remote.user = "${username}"
            remote.password = "${password}"
            }
            sshCommand remote: remote, command: 'sh expos-admin.sh', sudo: true
          }
      }
    }
  }
  environment {
    GIT_CREDENTIAL_ID = 'liuhy25252'
    GIT_EMAIL = 'liuhy25252@chinaunicom.cn'
    KUBECONFIG_CREDENTIAL_ID = 'kubeconfig-test'
    DOCKERHUB_CREDENTIAL_ID = 'harbor-id'
    REGISTRY = 'harbor.dap.local'
    DOCKERHUB_NAMESPACE = 'prod'
    GIT_URL = "http://${env.GIT}"
    APP_NAME = 'expos-admin'
    GIT = '10.126.138.28/ChinaUnicomBigData/MinistryOfTechnology/platform-development/projects/commoncompnent_group/basiccomponent_group/expos-admin-bootstrap'
    BRANCH_NAME = 'project_udap_k8s'
  }
}
